/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.srg.sam.generated.model

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ch.srg.sam.generated.model.ChapterDto
import ch.srg.sam.generated.model.AnalyticsDataDto
import ch.srg.sam.generated.model.AnalyticsMetadataDto
import ch.srg.sam.generated.model.AspectRatioDto
import ch.srg.sam.generated.model.AssignedByDto
import ch.srg.sam.generated.model.BlockReasonDto
import ch.srg.sam.generated.model.BusinessUnitDto
import ch.srg.sam.generated.model.HbbtvPropertiesDto
import ch.srg.sam.generated.model.ImageFocalPointDto
import ch.srg.sam.generated.model.MediaTypeDto
import ch.srg.sam.generated.model.PlayerPropertyDto
import ch.srg.sam.generated.model.RelatedContentDto
import ch.srg.sam.generated.model.ResourceDto
import ch.srg.sam.generated.model.SegmentDto
import ch.srg.sam.generated.model.SocialCountEntryDto
import ch.srg.sam.generated.model.SpriteSheetDto
import ch.srg.sam.generated.model.SubtitleDto
import ch.srg.sam.generated.model.TimeIntervalDto
import ch.srg.sam.generated.model.TypeDto
import ch.srg.sam.generated.model.YouthProtectionColorDto

class ChapterDtoTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ChapterDto
        //val modelInstance = ChapterDto()

        // to test the property `date`
        should("test date") {
            // uncomment below to test the property
            //modelInstance.date shouldBe ("TODO")
        }

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `imageUrl`
        should("test imageUrl") {
            // uncomment below to test the property
            //modelInstance.imageUrl shouldBe ("TODO")
        }

        // to test the property `mediaType`
        should("test mediaType") {
            // uncomment below to test the property
            //modelInstance.mediaType shouldBe ("TODO")
        }

        // to test the property `playableAbroad`
        should("test playableAbroad") {
            // uncomment below to test the property
            //modelInstance.playableAbroad shouldBe ("TODO")
        }

        // to test the property `position` - Position of this media within the sequence of medias of an episode.
        should("test position") {
            // uncomment below to test the property
            //modelInstance.position shouldBe ("TODO")
        }

        // to test the property `title`
        should("test title") {
            // uncomment below to test the property
            //modelInstance.title shouldBe ("TODO")
        }

        // to test the property `type`
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `urn`
        should("test urn") {
            // uncomment below to test the property
            //modelInstance.urn shouldBe ("TODO")
        }

        // to test the property `vendor`
        should("test vendor") {
            // uncomment below to test the property
            //modelInstance.vendor shouldBe ("TODO")
        }

        // to test the property `fullLengthMarkIn` - The markIn (starting point) in milliseconds of the corresponding full length media. Only set for video with onlyChapters=true. For full length videos and audios, this value is set to null.
        should("test fullLengthMarkIn") {
            // uncomment below to test the property
            //modelInstance.fullLengthMarkIn shouldBe ("TODO")
        }

        // to test the property `fullLengthMarkOut` - The markOut in milliseconds of the corresponding full length media. See also fullLengthMarkIn
        should("test fullLengthMarkOut") {
            // uncomment below to test the property
            //modelInstance.fullLengthMarkOut shouldBe ("TODO")
        }

        // to test the property `resourceList`
        should("test resourceList") {
            // uncomment below to test the property
            //modelInstance.resourceList shouldBe ("TODO")
        }

        // to test the property `segmentList`
        should("test segmentList") {
            // uncomment below to test the property
            //modelInstance.segmentList shouldBe ("TODO")
        }

        // to test the property `timeIntervalList` - The optional time interval list of this chapter.
        should("test timeIntervalList") {
            // uncomment below to test the property
            //modelInstance.timeIntervalList shouldBe ("TODO")
        }

        // to test the property `aspectRatio`
        should("test aspectRatio") {
            // uncomment below to test the property
            //modelInstance.aspectRatio shouldBe ("TODO")
        }

        // to test the property `dvrReferenceDate`
        should("test dvrReferenceDate") {
            // uncomment below to test the property
            //modelInstance.dvrReferenceDate shouldBe ("TODO")
        }

        // to test the property `spriteSheet`
        should("test spriteSheet") {
            // uncomment below to test the property
            //modelInstance.spriteSheet shouldBe ("TODO")
        }

        // to test the property `preTrailerStart`
        should("test preTrailerStart") {
            // uncomment below to test the property
            //modelInstance.preTrailerStart shouldBe ("TODO")
        }

        // to test the property `postTrailerStop`
        should("test postTrailerStop") {
            // uncomment below to test the property
            //modelInstance.postTrailerStop shouldBe ("TODO")
        }

        // to test the property `cesimId` - Used in various applications to correlate data with the live center. CESIM = Central System for Information Management. See also https://srgssr-ch.atlassian.net/wiki/spaces/STXT/pages/790265923/Live+Results+Center+-+CESIM?pageId=790265923
        should("test cesimId") {
            // uncomment below to test the property
            //modelInstance.cesimId shouldBe ("TODO")
        }

        // to test the property `hbbtvProperties`
        should("test hbbtvProperties") {
            // uncomment below to test the property
            //modelInstance.hbbtvProperties shouldBe ("TODO")
        }

        // to test the property `analyticsData`
        should("test analyticsData") {
            // uncomment below to test the property
            //modelInstance.analyticsData shouldBe ("TODO")
        }

        // to test the property `analyticsMetadata`
        should("test analyticsMetadata") {
            // uncomment below to test the property
            //modelInstance.analyticsMetadata shouldBe ("TODO")
        }

        // to test the property `assignedBy` - never set. Only defined to keep the openapi compatible.
        should("test assignedBy") {
            // uncomment below to test the property
            //modelInstance.assignedBy shouldBe ("TODO")
        }

        // to test the property `blockReason`
        should("test blockReason") {
            // uncomment below to test the property
            //modelInstance.blockReason shouldBe ("TODO")
        }

        // to test the property `description`
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `displayable` - Whether this media can be displayed.
        should("test displayable") {
            // uncomment below to test the property
            //modelInstance.displayable shouldBe ("TODO")
        }

        // to test the property `duration` - duration in milliseconds
        should("test duration") {
            // uncomment below to test the property
            //modelInstance.duration shouldBe ("TODO")
        }

        // to test the property `eventData` - Media metadata required for statistics and personalization (SocialView). Clients must send this value unmodified to statistic endpoints (/integrationlayer/2.0/{bu}/mediaStatistic/_*).
        should("test eventData") {
            // uncomment below to test the property
            //modelInstance.eventData shouldBe ("TODO")
        }

        // to test the property `fullLengthUrn` - The URN of the full length media, representing the \"Episode\", which is always the first chapter in the list. Only set if the chapter is a part \"clipped/segment\" and not the full length media.
        should("test fullLengthUrn") {
            // uncomment below to test the property
            //modelInstance.fullLengthUrn shouldBe ("TODO")
        }

        // to test the property `imageCopyright`
        should("test imageCopyright") {
            // uncomment below to test the property
            //modelInstance.imageCopyright shouldBe ("TODO")
        }

        // to test the property `imageFocalPoint`
        should("test imageFocalPoint") {
            // uncomment below to test the property
            //modelInstance.imageFocalPoint shouldBe ("TODO")
        }

        // to test the property `imageTitle`
        should("test imageTitle") {
            // uncomment below to test the property
            //modelInstance.imageTitle shouldBe ("TODO")
        }

        // to test the property `label`
        should("test label") {
            // uncomment below to test the property
            //modelInstance.label shouldBe ("TODO")
        }

        // to test the property `lead`
        should("test lead") {
            // uncomment below to test the property
            //modelInstance.lead shouldBe ("TODO")
        }

        // to test the property `mediaDescription`
        should("test mediaDescription") {
            // uncomment below to test the property
            //modelInstance.mediaDescription shouldBe ("TODO")
        }

        // to test the property `noEmbed` - Whether this chapter cannot be included in other sites and clients should therefore not provide an embed code.
        should("test noEmbed") {
            // uncomment below to test the property
            //modelInstance.noEmbed shouldBe ("TODO")
        }

        // to test the property `playerProperties`
        should("test playerProperties") {
            // uncomment below to test the property
            //modelInstance.playerProperties shouldBe ("TODO")
        }

        // to test the property `podcastHdUrl`
        should("test podcastHdUrl") {
            // uncomment below to test the property
            //modelInstance.podcastHdUrl shouldBe ("TODO")
        }

        // to test the property `podcastSdUrl`
        should("test podcastSdUrl") {
            // uncomment below to test the property
            //modelInstance.podcastSdUrl shouldBe ("TODO")
        }

        // to test the property `relatedContentList`
        should("test relatedContentList") {
            // uncomment below to test the property
            //modelInstance.relatedContentList shouldBe ("TODO")
        }

        // to test the property `socialCountList`
        should("test socialCountList") {
            // uncomment below to test the property
            //modelInstance.socialCountList shouldBe ("TODO")
        }

        // to test the property `subtitleList` - Subtitle list of the resources. Subtitles without url or format are excluded, these are only available as SubtitleInformation in subtitleInformationList
        should("test subtitleList") {
            // uncomment below to test the property
            //modelInstance.subtitleList shouldBe ("TODO")
        }

        // to test the property `tagList` - A tag is a self defined keyword e.g. \"sport\" or \"news\". It is unrelated to a topic.
        should("test tagList") {
            // uncomment below to test the property
            //modelInstance.tagList shouldBe ("TODO")
        }

        // to test the property `validFrom`
        should("test validFrom") {
            // uncomment below to test the property
            //modelInstance.validFrom shouldBe ("TODO")
        }

        // to test the property `validTo`
        should("test validTo") {
            // uncomment below to test the property
            //modelInstance.validTo shouldBe ("TODO")
        }

        // to test the property `youthProtectionColor`
        should("test youthProtectionColor") {
            // uncomment below to test the property
            //modelInstance.youthProtectionColor shouldBe ("TODO")
        }

    }
}
