/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.srg.sam.generated.model

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ch.srg.sam.generated.model.MediaDataDto
import ch.srg.sam.generated.model.AgeRatingDto
import ch.srg.sam.generated.model.AspectRatioDto
import ch.srg.sam.generated.model.DistributionVectorDto
import ch.srg.sam.generated.model.MediaDataAnalyticsDataDto
import ch.srg.sam.generated.model.MediaDataAnalyticsMetaDataDto
import ch.srg.sam.generated.model.MediaDataScheduledLivestreamDataDto
import ch.srg.sam.generated.model.MediaTypeDto
import ch.srg.sam.generated.model.PresentationDto
import ch.srg.sam.generated.model.PushTypeDto
import ch.srg.sam.generated.model.RelatedContentDataDto
import ch.srg.sam.generated.model.ResourceDataDto
import ch.srg.sam.generated.model.TimeIntervalDto
import ch.srg.sam.generated.model.UnconditionalBlockReasonDto
import ch.srg.sam.generated.model.YouthProtectionColorDto

class MediaDataDtoTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MediaDataDto
        //val modelInstance = MediaDataDto()

        // to test the property `mediaType` - The type of the media, video or audio
        should("test mediaType") {
            // uncomment below to test the property
            //modelInstance.mediaType shouldBe ("TODO")
        }

        // to test the property `externalId` - Unique identifier as defined by the business unit
        should("test externalId") {
            // uncomment below to test the property
            //modelInstance.externalId shouldBe ("TODO")
        }

        // to test the property `title`
        should("test title") {
            // uncomment below to test the property
            //modelInstance.title shouldBe ("TODO")
        }

        // to test the property `type`
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `startDate`
        should("test startDate") {
            // uncomment below to test the property
            //modelInstance.startDate shouldBe ("TODO")
        }

        // to test the property `durationMillis`
        should("test durationMillis") {
            // uncomment below to test the property
            //modelInstance.durationMillis shouldBe ("TODO")
        }

        // to test the property `urn` - The urn of the media. This field is readonly and ignored while creating or updating a media
        should("test urn") {
            // uncomment below to test the property
            //modelInstance.urn shouldBe ("TODO")
        }

        // to test the property `lead`
        should("test lead") {
            // uncomment below to test the property
            //modelInstance.lead shouldBe ("TODO")
        }

        // to test the property `description`
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `imageUrl` - URL has to support image scaling via appended path parameters. E.g. if imageUrl is https://host.com/images/name.png.
        should("test imageUrl") {
            // uncomment below to test the property
            //modelInstance.imageUrl shouldBe ("TODO")
        }

        // to test the property `imageTitle`
        should("test imageTitle") {
            // uncomment below to test the property
            //modelInstance.imageTitle shouldBe ("TODO")
        }

        // to test the property `imageCopyright`
        should("test imageCopyright") {
            // uncomment below to test the property
            //modelInstance.imageCopyright shouldBe ("TODO")
        }

        // to test the property `mediaDescription` - Can be used for accessibility purposes.
        should("test mediaDescription") {
            // uncomment below to test the property
            //modelInstance.mediaDescription shouldBe ("TODO")
        }

        // to test the property `label` - Some backends have a label field, that can be used for various purposes
        should("test label") {
            // uncomment below to test the property
            //modelInstance.label shouldBe ("TODO")
        }

        // to test the property `ageRating` - The (fsk) age rating. If an age rating is set, this may result in an age rating related block reason being set on the public API.
        should("test ageRating") {
            // uncomment below to test the property
            //modelInstance.ageRating shouldBe ("TODO")
        }

        // to test the property `youthProtectionColor`
        should("test youthProtectionColor") {
            // uncomment below to test the property
            //modelInstance.youthProtectionColor shouldBe ("TODO")
        }

        // to test the property `unconditionalBlockReason`
        should("test unconditionalBlockReason") {
            // uncomment below to test the property
            //modelInstance.unconditionalBlockReason shouldBe ("TODO")
        }

        // to test the property `podcastSdUrl`
        should("test podcastSdUrl") {
            // uncomment below to test the property
            //modelInstance.podcastSdUrl shouldBe ("TODO")
        }

        // to test the property `podcastHdUrl`
        should("test podcastHdUrl") {
            // uncomment below to test the property
            //modelInstance.podcastHdUrl shouldBe ("TODO")
        }

        // to test the property `validFrom`
        should("test validFrom") {
            // uncomment below to test the property
            //modelInstance.validFrom shouldBe ("TODO")
        }

        // to test the property `validTo`
        should("test validTo") {
            // uncomment below to test the property
            //modelInstance.validTo shouldBe ("TODO")
        }

        // to test the property `playableAbroad` - Indicates if this media can be played outside of Switzerland.
        should("test playableAbroad") {
            // uncomment below to test the property
            //modelInstance.playableAbroad shouldBe ("TODO")
        }

        // to test the property `relatedContents`
        should("test relatedContents") {
            // uncomment below to test the property
            //modelInstance.relatedContents shouldBe ("TODO")
        }

        // to test the property `presentation` - Currently there are 2 presentation modes: DEFAULT and VIDEO_360. VIDEO_360 was an experiment,might not ever make it to production
        should("test presentation") {
            // uncomment below to test the property
            //modelInstance.presentation shouldBe ("TODO")
        }

        // to test the property `aspectRatio`
        should("test aspectRatio") {
            // uncomment below to test the property
            //modelInstance.aspectRatio shouldBe ("TODO")
        }

        // to test the property `noEmbed` - Indicates if it is not allowed to embed this media on another website.
        should("test noEmbed") {
            // uncomment below to test the property
            //modelInstance.noEmbed shouldBe ("TODO")
        }

        // to test the property `markIn` - Information for the player, when to start playing the media, in milli seconds
        should("test markIn") {
            // uncomment below to test the property
            //modelInstance.markIn shouldBe ("TODO")
        }

        // to test the property `markOut` - Information for the player, when to stop playing the media, in milli seconds
        should("test markOut") {
            // uncomment below to test the property
            //modelInstance.markOut shouldBe ("TODO")
        }

        // to test the property `isFullLength` - True if the media is a full length video. If multiple medias are added to an episode, only the first media in the list can have this flag set. The other medias are treated as segments of the full length media.
        should("test isFullLength") {
            // uncomment below to test the property
            //modelInstance.isFullLength shouldBe ("TODO")
        }

        // to test the property `enableEventData` - If true, the server creates event data for this media. Event data are used for statistics and personalization (SocialView). See Chapter.eventData and Segment.eventData.
        should("test enableEventData") {
            // uncomment below to test the property
            //modelInstance.enableEventData shouldBe ("TODO")
        }

        // to test the property `resources` - A playable resource. Contains the url to the manifest and additional information about the streaming protocol.
        should("test resources") {
            // uncomment below to test the property
            //modelInstance.resources shouldBe ("TODO")
        }

        // to test the property `timeIntervals` - The optional time interval list of this media.
        should("test timeIntervals") {
            // uncomment below to test the property
            //modelInstance.timeIntervals shouldBe ("TODO")
        }

        // to test the property `tagList`
        should("test tagList") {
            // uncomment below to test the property
            //modelInstance.tagList shouldBe ("TODO")
        }

        // to test the property `productId` - External Product Reference Id.
        should("test productId") {
            // uncomment below to test the property
            //modelInstance.productId shouldBe ("TODO")
        }

        // to test the property `analyticsData`
        should("test analyticsData") {
            // uncomment below to test the property
            //modelInstance.analyticsData shouldBe ("TODO")
        }

        // to test the property `analyticsMetaData`
        should("test analyticsMetaData") {
            // uncomment below to test the property
            //modelInstance.analyticsMetaData shouldBe ("TODO")
        }

        // to test the property `onlyVisibleById` - If true, then the media will be hidden in most endpoints. This flag is used on medias which should by default not appear in play, but which can be played by direct link. By urn(s) and by externalId(s) requests ignore this field.
        should("test onlyVisibleById") {
            // uncomment below to test the property
            //modelInstance.onlyVisibleById shouldBe ("TODO")
        }

        // to test the property `onlyVisibleByIdOnVectors` - This media will be hidden in most endpoints (e.g. mediaLists, search) if the requested vector is contained in the list. Use cases: - Media should only be discoverable for PAC editors (set all vectors, except PAC) - Media should not be discoverable at all (set all vectors) By urn(s) and by externalId(s) requests ignore this field. If empty or unset, the media visibility will not be restricted. If no explicit vector is requested, this media is only hidden if all vectors are set.
        should("test onlyVisibleByIdOnVectors") {
            // uncomment below to test the property
            //modelInstance.onlyVisibleByIdOnVectors shouldBe ("TODO")
        }

        // to test the property `additionalShowUrn` - A media can belong to at most two shows (primary and additional, both optional). The primary relation to a show is established through the episode, the additional one through this field.
        should("test additionalShowUrn") {
            // uncomment below to test the property
            //modelInstance.additionalShowUrn shouldBe ("TODO")
        }

        // to test the property `hiddenInHbbTv` - If true, this media is not visible in HbbTv.
        should("test hiddenInHbbTv") {
            // uncomment below to test the property
            //modelInstance.hiddenInHbbTv shouldBe ("TODO")
        }

        // to test the property `scheduledLivestreamData`
        should("test scheduledLivestreamData") {
            // uncomment below to test the property
            //modelInstance.scheduledLivestreamData shouldBe ("TODO")
        }

        // to test the property `position` - Position of the media within a list of medias (e.g. ILv2 MediaList), lowest position = first list element. If the position is omitted, the position of the media within the pushed list defines the order. If pushed explicitly, either all or no medias in the list can have a position set.  For on demand audio use case: the first positioned media is considered full length, and must have position `0` if pushed explicitly.  You should use this field to control the order of the national/main simulcast livestream medias, which are defined across multiple episodes.  For Regionaljournal use case: Beware that SAM considers the first positioned media (lowest position value) within the same episode as the national / main livestream media.
        should("test position") {
            // uncomment below to test the property
            //modelInstance.position shouldBe ("TODO")
        }

    }
}
