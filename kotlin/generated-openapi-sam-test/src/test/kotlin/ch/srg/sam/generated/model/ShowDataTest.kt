/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.srg.sam.generated.model

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ch.srg.sam.generated.model.ShowDataDto
import ch.srg.sam.generated.model.DistributionVectorDto
import ch.srg.sam.generated.model.OrderMediaListByDto
import ch.srg.sam.generated.model.PushLanguageDto
import ch.srg.sam.generated.model.PushLinkDto
import ch.srg.sam.generated.model.QualityDto
import ch.srg.sam.generated.model.ShowBroadcastInformationDto

class ShowDataDtoTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ShowDataDto
        //val modelInstance = ShowDataDto()

        // to test the property `title`
        should("test title") {
            // uncomment below to test the property
            //modelInstance.title shouldBe ("TODO")
        }

        // to test the property `lead`
        should("test lead") {
            // uncomment below to test the property
            //modelInstance.lead shouldBe ("TODO")
        }

        // to test the property `description`
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `imageUrl`
        should("test imageUrl") {
            // uncomment below to test the property
            //modelInstance.imageUrl shouldBe ("TODO")
        }

        // to test the property `imageTitle`
        should("test imageTitle") {
            // uncomment below to test the property
            //modelInstance.imageTitle shouldBe ("TODO")
        }

        // to test the property `imageCopyright`
        should("test imageCopyright") {
            // uncomment below to test the property
            //modelInstance.imageCopyright shouldBe ("TODO")
        }

        // to test the property `bannerImageUrl`
        should("test bannerImageUrl") {
            // uncomment below to test the property
            //modelInstance.bannerImageUrl shouldBe ("TODO")
        }

        // to test the property `posterImageUrl`
        should("test posterImageUrl") {
            // uncomment below to test the property
            //modelInstance.posterImageUrl shouldBe ("TODO")
        }

        // to test the property `podcastImageUrl`
        should("test podcastImageUrl") {
            // uncomment below to test the property
            //modelInstance.podcastImageUrl shouldBe ("TODO")
        }

        // to test the property `homepageUrl`
        should("test homepageUrl") {
            // uncomment below to test the property
            //modelInstance.homepageUrl shouldBe ("TODO")
        }

        // to test the property `podcastSubscriptionUrl`
        should("test podcastSubscriptionUrl") {
            // uncomment below to test the property
            //modelInstance.podcastSubscriptionUrl shouldBe ("TODO")
        }

        // to test the property `podcastFeedSdUrl`
        should("test podcastFeedSdUrl") {
            // uncomment below to test the property
            //modelInstance.podcastFeedSdUrl shouldBe ("TODO")
        }

        // to test the property `podcastFeedHdUrl`
        should("test podcastFeedHdUrl") {
            // uncomment below to test the property
            //modelInstance.podcastFeedHdUrl shouldBe ("TODO")
        }

        // to test the property `podcastDeezerUrl`
        should("test podcastDeezerUrl") {
            // uncomment below to test the property
            //modelInstance.podcastDeezerUrl shouldBe ("TODO")
        }

        // to test the property `podcastSpotifyUrl`
        should("test podcastSpotifyUrl") {
            // uncomment below to test the property
            //modelInstance.podcastSpotifyUrl shouldBe ("TODO")
        }

        // to test the property `timeTableUrl` - Link to program guide
        should("test timeTableUrl") {
            // uncomment below to test the property
            //modelInstance.timeTableUrl shouldBe ("TODO")
        }

        // to test the property `hiddenInAToZ` - Used by public endpoint showList-alphabetical
        should("test hiddenInAToZ") {
            // uncomment below to test the property
            //modelInstance.hiddenInAToZ shouldBe ("TODO")
        }

        // to test the property `suppressWebIndexing` - If true, clients should make sure that this show is not indexed by web crawlers
        should("test suppressWebIndexing") {
            // uncomment below to test the property
            //modelInstance.suppressWebIndexing shouldBe ("TODO")
        }

        // to test the property `links`
        should("test links") {
            // uncomment below to test the property
            //modelInstance.links shouldBe ("TODO")
        }

        // to test the property `topicUrns`
        should("test topicUrns") {
            // uncomment below to test the property
            //modelInstance.topicUrns shouldBe ("TODO")
        }

        // to test the property `channelUrn`
        should("test channelUrn") {
            // uncomment below to test the property
            //modelInstance.channelUrn shouldBe ("TODO")
        }

        // to test the property `broadcastInformation`
        should("test broadcastInformation") {
            // uncomment below to test the property
            //modelInstance.broadcastInformation shouldBe ("TODO")
        }

        // to test the property `qualities` - Available video qualities.
        should("test qualities") {
            // uncomment below to test the property
            //modelInstance.qualities shouldBe ("TODO")
        }

        // to test the property `audioLanguages` - Available audio languages.
        should("test audioLanguages") {
            // uncomment below to test the property
            //modelInstance.audioLanguages shouldBe ("TODO")
        }

        // to test the property `subtitleLanguages` - Available subtitle languages.
        should("test subtitleLanguages") {
            // uncomment below to test the property
            //modelInstance.subtitleLanguages shouldBe ("TODO")
        }

        // to test the property `audioDescriptionAvailable`
        should("test audioDescriptionAvailable") {
            // uncomment below to test the property
            //modelInstance.audioDescriptionAvailable shouldBe ("TODO")
        }

        // to test the property `subtitlesAvailable` - Indicates that subtitles are available, does not have to reflect contents of subtitleLanguages
        should("test subtitlesAvailable") {
            // uncomment below to test the property
            //modelInstance.subtitlesAvailable shouldBe ("TODO")
        }

        // to test the property `multiAudioLanguagesAvailable` - Indicates that more than one audio language is available, does not have to reflect contents of audioLanguages
        should("test multiAudioLanguagesAvailable") {
            // uncomment below to test the property
            //modelInstance.multiAudioLanguagesAvailable shouldBe ("TODO")
        }

        // to test the property `orderMediaListBy` - Ordering of the show's media list. Defaults to MEDIA_START_DATE_DESC.
        should("test orderMediaListBy") {
            // uncomment below to test the property
            //modelInstance.orderMediaListBy shouldBe ("TODO")
        }

        // to test the property `hiddenInHbbTv` - Indicates if this show should be hidden in platform HbbTv
        should("test hiddenInHbbTv") {
            // uncomment below to test the property
            //modelInstance.hiddenInHbbTv shouldBe ("TODO")
        }

        // to test the property `onlyVisibleByIdOnVectors` - This show will be hidden in most endpoints (e.g. showList, search) if the requested vector is contained in the list. Use this for shows that, for example, are just containers for episodes and should therefore not appear in search results. By urn(s) and by externalId(s) requests ignore this field. If empty or unset, the show visibility will not be restricted. If no explicit vector is requested, this show is only hidden if all vectors are set.
        should("test onlyVisibleByIdOnVectors") {
            // uncomment below to test the property
            //modelInstance.onlyVisibleByIdOnVectors shouldBe ("TODO")
        }

        // to test the property `validFromAToZ` - Sets a date from which this show should appear in showList-alphabetical. By urn(s) and by externalId(s) requests ignore this field.
        should("test validFromAToZ") {
            // uncomment below to test the property
            //modelInstance.validFromAToZ shouldBe ("TODO")
        }

        // to test the property `validToAToZ` - Sets a date up to which this show should appear in showList-alphabetical. By urn(s) and by externalId(s) requests ignore this field.
        should("test validToAToZ") {
            // uncomment below to test the property
            //modelInstance.validToAToZ shouldBe ("TODO")
        }

    }
}
