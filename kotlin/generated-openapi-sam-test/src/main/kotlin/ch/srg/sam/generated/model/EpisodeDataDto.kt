/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.srg.sam.generated.model

import ch.srg.sam.generated.model.EpisodeBroadcastDto
import ch.srg.sam.generated.model.MediaDataDto

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * @param title 
 * @param lead 
 * @param description 
 * @param imageUrl 
 * @param imageTitle 
 * @param imageCopyright 
 * @param showUrn 
 * @param publishedDate 
 * @param episodeNumber 
 * @param seasonNumber 
 * @param medias The media that hold the video or audio metadata and the playable resources. An episode can contain multiple media. A media represents a full-length video of an episode or a logical or physical segment. A media can only be added to one episode. If a media already exists on another episode, a client error is returned. If an episode contains multiple media of type LIVESTREAM, the first one is considered the main/national simulcast livestream media. The following medias are considered region specific simulcast livestream media (e.g. SRF 1 Regionaljournal).
 * @param broadcasts Optional list of broadcasts
 * @param isWebOnly 
 * @param isWebFirst 
 * @param topicUrns Urns of the topics of this episode. These topics should be consistent with the Topics of the associated Show (via showUrn) of this Episode.
 * @param transmissionId The transmission ID is used to identify the episode in the TMS (e.g. WhatsOn).
 * @param hasSignLanguage Indicates if the episode has sign language.
 */


data class EpisodeDataDto (

    @field:JsonProperty("title")
    val title: kotlin.String,

    @field:JsonProperty("lead")
    val lead: kotlin.String? = null,

    @field:JsonProperty("description")
    val description: kotlin.String? = null,

    @field:JsonProperty("imageUrl")
    val imageUrl: kotlin.String? = null,

    @field:JsonProperty("imageTitle")
    val imageTitle: kotlin.String? = null,

    @field:JsonProperty("imageCopyright")
    val imageCopyright: kotlin.String? = null,

    @field:JsonProperty("showUrn")
    val showUrn: kotlin.String? = null,

    @field:JsonProperty("publishedDate")
    val publishedDate: java.time.LocalDateTime? = null,

    @field:JsonProperty("episodeNumber")
    val episodeNumber: kotlin.Int? = null,

    @field:JsonProperty("seasonNumber")
    val seasonNumber: kotlin.Int? = null,

    /* The media that hold the video or audio metadata and the playable resources. An episode can contain multiple media. A media represents a full-length video of an episode or a logical or physical segment. A media can only be added to one episode. If a media already exists on another episode, a client error is returned. If an episode contains multiple media of type LIVESTREAM, the first one is considered the main/national simulcast livestream media. The following medias are considered region specific simulcast livestream media (e.g. SRF 1 Regionaljournal). */
    @field:JsonProperty("medias")
    val medias: kotlin.collections.List<MediaDataDto>? = null,

    /* Optional list of broadcasts */
    @field:JsonProperty("broadcasts")
    val broadcasts: kotlin.collections.List<EpisodeBroadcastDto>? = null,

    @field:JsonProperty("isWebOnly")
    val isWebOnly: kotlin.Boolean? = null,

    @field:JsonProperty("isWebFirst")
    val isWebFirst: kotlin.Boolean? = null,

    /* Urns of the topics of this episode. These topics should be consistent with the Topics of the associated Show (via showUrn) of this Episode. */
    @field:JsonProperty("topicUrns")
    val topicUrns: kotlin.collections.List<kotlin.String>? = null,

    /* The transmission ID is used to identify the episode in the TMS (e.g. WhatsOn). */
    @field:JsonProperty("transmissionId")
    val transmissionId: kotlin.String? = null,

    /* Indicates if the episode has sign language. */
    @field:JsonProperty("hasSignLanguage")
    val hasSignLanguage: kotlin.Boolean? = null

)

