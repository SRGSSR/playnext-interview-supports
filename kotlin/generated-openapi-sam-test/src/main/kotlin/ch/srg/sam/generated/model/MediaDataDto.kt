/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.srg.sam.generated.model

import ch.srg.sam.generated.model.AgeRatingDto
import ch.srg.sam.generated.model.AspectRatioDto
import ch.srg.sam.generated.model.DistributionVectorDto
import ch.srg.sam.generated.model.MediaDataAnalyticsDataDto
import ch.srg.sam.generated.model.MediaDataAnalyticsMetaDataDto
import ch.srg.sam.generated.model.MediaDataScheduledLivestreamDataDto
import ch.srg.sam.generated.model.MediaTypeDto
import ch.srg.sam.generated.model.PresentationDto
import ch.srg.sam.generated.model.PushTypeDto
import ch.srg.sam.generated.model.RelatedContentDataDto
import ch.srg.sam.generated.model.ResourceDataDto
import ch.srg.sam.generated.model.TimeIntervalDto
import ch.srg.sam.generated.model.UnconditionalBlockReasonDto
import ch.srg.sam.generated.model.YouthProtectionColorDto

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * The media holds the video or audio metadata and the playable resources. A media represents a full-length video of an episode or a logical or physical segment.
 *
 * @param mediaType The type of the media, video or audio
 * @param externalId Unique identifier as defined by the business unit
 * @param title 
 * @param type 
 * @param startDate 
 * @param durationMillis 
 * @param urn The urn of the media. This field is readonly and ignored while creating or updating a media
 * @param lead 
 * @param description 
 * @param imageUrl URL has to support image scaling via appended path parameters. E.g. if imageUrl is https://host.com/images/name.png.
 * @param imageTitle 
 * @param imageCopyright 
 * @param mediaDescription Can be used for accessibility purposes.
 * @param label Some backends have a label field, that can be used for various purposes
 * @param ageRating The (fsk) age rating. If an age rating is set, this may result in an age rating related block reason being set on the public API.
 * @param youthProtectionColor 
 * @param unconditionalBlockReason 
 * @param podcastSdUrl 
 * @param podcastHdUrl 
 * @param validFrom 
 * @param validTo 
 * @param playableAbroad Indicates if this media can be played outside of Switzerland.
 * @param relatedContents 
 * @param presentation Currently there are 2 presentation modes: DEFAULT and VIDEO_360. VIDEO_360 was an experiment,might not ever make it to production
 * @param aspectRatio 
 * @param noEmbed Indicates if it is not allowed to embed this media on another website.
 * @param markIn Information for the player, when to start playing the media, in milli seconds
 * @param markOut Information for the player, when to stop playing the media, in milli seconds
 * @param isFullLength True if the media is a full length video. If multiple medias are added to an episode, only the first media in the list can have this flag set. The other medias are treated as segments of the full length media.
 * @param enableEventData If true, the server creates event data for this media. Event data are used for statistics and personalization (SocialView). See Chapter.eventData and Segment.eventData.
 * @param resources A playable resource. Contains the url to the manifest and additional information about the streaming protocol.
 * @param timeIntervals The optional time interval list of this media.
 * @param tagList 
 * @param productId External Product Reference Id.
 * @param analyticsData 
 * @param analyticsMetaData 
 * @param onlyVisibleById If true, then the media will be hidden in most endpoints. This flag is used on medias which should by default not appear in play, but which can be played by direct link. By urn(s) and by externalId(s) requests ignore this field.
 * @param onlyVisibleByIdOnVectors This media will be hidden in most endpoints (e.g. mediaLists, search) if the requested vector is contained in the list. Use cases: - Media should only be discoverable for PAC editors (set all vectors, except PAC) - Media should not be discoverable at all (set all vectors) By urn(s) and by externalId(s) requests ignore this field. If empty or unset, the media visibility will not be restricted. If no explicit vector is requested, this media is only hidden if all vectors are set.
 * @param additionalShowUrn A media can belong to at most two shows (primary and additional, both optional). The primary relation to a show is established through the episode, the additional one through this field.
 * @param hiddenInHbbTv If true, this media is not visible in HbbTv.
 * @param scheduledLivestreamData 
 * @param position Position of the media within a list of medias (e.g. ILv2 MediaList), lowest position = first list element. If the position is omitted, the position of the media within the pushed list defines the order. If pushed explicitly, either all or no medias in the list can have a position set.  For on demand audio use case: the first positioned media is considered full length, and must have position `0` if pushed explicitly.  You should use this field to control the order of the national/main simulcast livestream medias, which are defined across multiple episodes.  For Regionaljournal use case: Beware that SAM considers the first positioned media (lowest position value) within the same episode as the national / main livestream media.
 */


data class MediaDataDto (

    /* The type of the media, video or audio */
    @field:JsonProperty("mediaType")
    val mediaType: MediaTypeDto,

    /* Unique identifier as defined by the business unit */
    @field:JsonProperty("externalId")
    val externalId: kotlin.String,

    @field:JsonProperty("title")
    val title: kotlin.String,

    @field:JsonProperty("type")
    val type: PushTypeDto,

    @field:JsonProperty("startDate")
    val startDate: java.time.LocalDateTime,

    @field:JsonProperty("durationMillis")
    val durationMillis: kotlin.Long,

    /* The urn of the media. This field is readonly and ignored while creating or updating a media */
    @field:JsonProperty("urn")
    val urn: kotlin.String? = null,

    @field:JsonProperty("lead")
    val lead: kotlin.String? = null,

    @field:JsonProperty("description")
    val description: kotlin.String? = null,

    /* URL has to support image scaling via appended path parameters. E.g. if imageUrl is https://host.com/images/name.png. */
    @field:JsonProperty("imageUrl")
    val imageUrl: kotlin.String? = null,

    @field:JsonProperty("imageTitle")
    val imageTitle: kotlin.String? = null,

    @field:JsonProperty("imageCopyright")
    val imageCopyright: kotlin.String? = null,

    /* Can be used for accessibility purposes. */
    @field:JsonProperty("mediaDescription")
    val mediaDescription: kotlin.String? = null,

    /* Some backends have a label field, that can be used for various purposes */
    @field:JsonProperty("label")
    val label: kotlin.String? = null,

    /* The (fsk) age rating. If an age rating is set, this may result in an age rating related block reason being set on the public API. */
    @field:JsonProperty("ageRating")
    val ageRating: AgeRatingDto? = null,

    @field:JsonProperty("youthProtectionColor")
    val youthProtectionColor: YouthProtectionColorDto? = null,

    @field:JsonProperty("unconditionalBlockReason")
    val unconditionalBlockReason: UnconditionalBlockReasonDto? = null,

    @field:JsonProperty("podcastSdUrl")
    val podcastSdUrl: kotlin.String? = null,

    @field:JsonProperty("podcastHdUrl")
    val podcastHdUrl: kotlin.String? = null,

    @field:JsonProperty("validFrom")
    val validFrom: java.time.LocalDateTime? = null,

    @field:JsonProperty("validTo")
    val validTo: java.time.LocalDateTime? = null,

    /* Indicates if this media can be played outside of Switzerland. */
    @field:JsonProperty("playableAbroad")
    val playableAbroad: kotlin.Boolean? = null,

    @field:JsonProperty("relatedContents")
    val relatedContents: kotlin.collections.List<RelatedContentDataDto>? = null,

    /* Currently there are 2 presentation modes: DEFAULT and VIDEO_360. VIDEO_360 was an experiment,might not ever make it to production */
    @field:JsonProperty("presentation")
    val presentation: PresentationDto? = null,

    @field:JsonProperty("aspectRatio")
    val aspectRatio: AspectRatioDto? = null,

    /* Indicates if it is not allowed to embed this media on another website. */
    @field:JsonProperty("noEmbed")
    val noEmbed: kotlin.Boolean? = false,

    /* Information for the player, when to start playing the media, in milli seconds */
    @field:JsonProperty("markIn")
    val markIn: kotlin.Long? = null,

    /* Information for the player, when to stop playing the media, in milli seconds */
    @field:JsonProperty("markOut")
    val markOut: kotlin.Long? = null,

    /* True if the media is a full length video. If multiple medias are added to an episode, only the first media in the list can have this flag set. The other medias are treated as segments of the full length media. */
    @field:JsonProperty("isFullLength")
    val isFullLength: kotlin.Boolean? = null,

    /* If true, the server creates event data for this media. Event data are used for statistics and personalization (SocialView). See Chapter.eventData and Segment.eventData. */
    @field:JsonProperty("enableEventData")
    val enableEventData: kotlin.Boolean? = true,

    /* A playable resource. Contains the url to the manifest and additional information about the streaming protocol. */
    @field:JsonProperty("resources")
    val resources: kotlin.collections.List<ResourceDataDto>? = null,

    /* The optional time interval list of this media. */
    @field:JsonProperty("timeIntervals")
    val timeIntervals: kotlin.collections.List<TimeIntervalDto>? = null,

    @field:JsonProperty("tagList")
    val tagList: kotlin.collections.List<kotlin.String>? = null,

    /* External Product Reference Id. */
    @field:JsonProperty("productId")
    val productId: kotlin.String? = null,

    @field:JsonProperty("analyticsData")
    val analyticsData: MediaDataAnalyticsDataDto? = null,

    @field:JsonProperty("analyticsMetaData")
    val analyticsMetaData: MediaDataAnalyticsMetaDataDto? = null,

    /* If true, then the media will be hidden in most endpoints. This flag is used on medias which should by default not appear in play, but which can be played by direct link. By urn(s) and by externalId(s) requests ignore this field. */
    @field:JsonProperty("onlyVisibleById")
    @Deprecated(message = "This property is deprecated.")
    val onlyVisibleById: kotlin.Boolean? = null,

    /* This media will be hidden in most endpoints (e.g. mediaLists, search) if the requested vector is contained in the list. Use cases: - Media should only be discoverable for PAC editors (set all vectors, except PAC) - Media should not be discoverable at all (set all vectors) By urn(s) and by externalId(s) requests ignore this field. If empty or unset, the media visibility will not be restricted. If no explicit vector is requested, this media is only hidden if all vectors are set. */
    @field:JsonProperty("onlyVisibleByIdOnVectors")
    val onlyVisibleByIdOnVectors: kotlin.collections.List<DistributionVectorDto>? = null,

    /* A media can belong to at most two shows (primary and additional, both optional). The primary relation to a show is established through the episode, the additional one through this field. */
    @field:JsonProperty("additionalShowUrn")
    val additionalShowUrn: kotlin.String? = null,

    /* If true, this media is not visible in HbbTv. */
    @field:JsonProperty("hiddenInHbbTv")
    @Deprecated(message = "This property is deprecated.")
    val hiddenInHbbTv: kotlin.Boolean? = null,

    @field:JsonProperty("scheduledLivestreamData")
    val scheduledLivestreamData: MediaDataScheduledLivestreamDataDto? = null,

    /* Position of the media within a list of medias (e.g. ILv2 MediaList), lowest position = first list element. If the position is omitted, the position of the media within the pushed list defines the order. If pushed explicitly, either all or no medias in the list can have a position set.  For on demand audio use case: the first positioned media is considered full length, and must have position `0` if pushed explicitly.  You should use this field to control the order of the national/main simulcast livestream medias, which are defined across multiple episodes.  For Regionaljournal use case: Beware that SAM considers the first positioned media (lowest position value) within the same episode as the national / main livestream media. */
    @field:JsonProperty("position")
    val position: kotlin.Int? = null

)

